const HtmlValidate = require('html-validate').HtmlValidate;
const Reporter = require('html-validate/build/reporter').default;
const htmlValidateFormatter = require(`html-validate/build/cli/formatter`).getFormatter;

/**
 * Takes formatter data in any of the following formats:
 *
 * - string
 * - string[]
 * - [string, object][]
 *
 * The option object can contain the following options:
 *
 * - "dest": set output destination file
 */
function prepareFormatter(formatter){
	if (!Array.isArray(formatter)){
		formatter = [formatter];
	}

	return formatter
		.map(entry => Array.isArray(entry) ? entry : [entry])          // string -> string[]
		.map(entry => entry.length < 2 ? [entry[0], {}] : entry)       // [string] -> [string, object]
		.map(([name, options]) => {
			if (options.dest){
				return `${name}=${options.dest}`;
			} else {
				return name;
			}
		}).join(',');
}

function getFormatter(options){
	const formatString = prepareFormatter(options.format);
	return htmlValidateFormatter(formatString);
}

module.exports = function(grunt){
	grunt.registerMultiTask('htmlvalidate', 'Validate HTML files', function(){
		const htmlvalidate = new HtmlValidate();
		const options = this.options({
			failOnError: true,
			format: 'stylish',
		});
		const formatter = getFormatter(options);

		let results = [];
		this.files.forEach(fileset => {
			results = results.concat(fileset.src.map(filename => htmlvalidate.validateFile(filename)));
		});

		const merged = Reporter.merge(results);
		const output = formatter(merged);
		if (output){
			console.log(output);
		}

		return merged.valid || !options.failOnError;
	});
};
